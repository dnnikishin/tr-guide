version: "3"
services:

  postgres:
    image: postgres:alpine
    container_name: travel-db-postgres
    restart: always
    env_file:
      - postgres.env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - travel-guide

  app:
    build: .
    image: travel-api:0.0.3
    container_name: travel-api
    ports:
      - 5000:5000
    depends_on:
      - postgres
    env_file:
      - app.env
    environment:
      NODE_ENV: production
    labels:      
      - "traefik.enable=true"
      - "traefik.http.routers.travel-api.rule=Host(`travel-api.fumus.ru`)"
      - "traefik.http.routers.travel-api.entrypoints=websecure"
      - "traefik.http.routers.travel-api.tls.certresolver=myresolver"
      - "traefik.http.routers.travel-api.service=travel-api"
      - "traefik.docker.network=traefik_proxy"
    volumes:
      - static:/home/node/app/static
    networks:
      - travel-guide
      - traefik_proxy

  content:
    image: nginx
    restart: always
    volumes:
      - static:/usr/share/nginx/html/static:ro
    labels:      
      - "traefik.enable=true"
      - "traefik.http.routers.travel-static.rule=Host(`travel-static.fumus.ru`)"
      - "traefik.http.routers.travel-static.entrypoints=websecure"
      - "traefik.http.routers.travel-static.tls.certresolver=myresolver"
      - "traefik.http.routers.travel-static.service=travel-static"
      - "traefik.docker.network=traefik_proxy"
    networks:
      - travel-guide
      - traefik_proxy

networks:
  travel-guide:
    driver: bridge
  traefik_proxy:
    external: true

volumes:
  static:
  dbdata:
  
